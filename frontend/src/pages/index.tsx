import Head from "next/head";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Heading,
  Spinner,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  useToast,
  VStack,
} from "@chakra-ui/react";
import { useProductsQueries } from "@/features/products/UseProducts";
import { useFormik } from "formik";
import React from "react";
import { FormikProps } from "@/models/FormikModels";
import { useCreateProduct } from "@/features/products/UseCreateProduct";
import { useDeleteProduct } from "@/features/products/UseDeleteProduct";
import { useEditProduct } from "@/features/products/useEditProduct";
import { validationSchema } from "@/utils/validation";

// chakra ui
// form formik handle form
// yup validation form
// axios api call
// react-query manager API call (caching, state, error.) Tanstack query

export default function Home() {
  // const { data: products, isLoading } = useProducts();
  const { data, isLoading, refetch: refetchProduct } = useProductsQueries();
  const toast = useToast();

  const initialValues: FormikProps = {
    name: "",
    price: 0,
    description: "",
    image: "",
    id: 0,
  };

  const formik = useFormik({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: async (values, actions) => {
      const { name, price, description, image, id } = formik.values;

      if (id) {
        // if id exist, it only will do patch
        editProductOptions({ name, price, description, image, id });
        toast({
          title: "Product edited",
          status: "success",
        });
      } else {
        createProducts({ name, price, description, image });
        toast({
          title: "Product created",
          status: "success",
        });
      }

      formik.setFieldValue("name", "");
      formik.setFieldValue("price", 0);
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", 0);
      // Handle form submission here using POST products
    },
  });

  const handleFormInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    const parsedValue = name === "price" ? parseInt(value) : value;
    formik.setFieldValue(name, parsedValue);
  };

  const { mutate: createProducts, isLoading: createsProductisLoading } =
    useCreateProduct({
      onSuccess: () => {
        // Handle the success case here
        // console.log("Mutation successful:", data);
        // You can update state, show notifications, or perform other actions as needed.
        refetchProduct();
      },
    });

  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProduct();
    },
  });

  const { mutate: editProductOptions, isLoading: editProductIsLoading } =
    useEditProduct({
      onSuccess: () => {
        refetchProduct();
      },
    });

  const onEditClick = (product: FormikProps) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
    formik.setFieldValue("image", product.image);
  };

  const confirmationDelete = (id: number) => {
    const shouldDelete = confirm("Are you sure?");
    if (shouldDelete) {
      deleteProduct(id);
      toast({
        title: "Product deleted",
        status: "info",
      });
    }
  };

  // send data to table for UI
  const renderProduct = () => {
    if (!data) {
      return null;
    }

    return data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description}</Td>
          <Td>{product.image}</Td>
          <Td>
            <Button onClick={() => onEditClick(product)} colorScheme={"cyan"}>
              Edit
            </Button>
            <Button
              onClick={() => confirmationDelete(product.id)}
              colorScheme={"red"}
            >
              Delete
            </Button>
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Hello World</Heading>
          <Table mb={"6"}>
            <Thead>
              <Tr>
                <Th>ID</Th>
                <Th>Name</Th>
                <Th>Price</Th>
                <Th>Description</Th>
                <Th>Image</Th>
                <Th colSpan={2}>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {/* <Tr>
                <Td>Contoh</Td>
                <Td>Contoh</Td>
                <Td>Contoh</Td>
                <Td>Contoh</Td>
                <Td>Contoh</Td>
              </Tr> */}
              {renderProduct()}
              {/*{isLoading ? <Spinner /> : null}*/}
              {isLoading && <Spinner />}
            </Tbody>
          </Table>
          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={"3"}>
              <FormControl>
                <FormLabel>Product ID</FormLabel>
                <input
                  onChange={handleFormInput}
                  name={"id"}
                  placeholder={"product id"}
                  value={formik.values.id}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <input
                  onChange={handleFormInput}
                  name={"name"}
                  placeholder={"product name"}
                  value={formik.values.name}
                />
                {formik.touched.name && formik.errors.name && (
                  <div style={{ color: "red" }}>{formik.errors.name}</div>
                )}
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <input
                  type={"number"}
                  onChange={handleFormInput}
                  name={"price"}
                  placeholder={"price"}
                  value={formik.values.price}
                />
                {formik.touched.price && formik.errors.price && (
                  <div style={{ color: "red" }}>{formik.errors.price}</div>
                )}
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <input
                  onChange={handleFormInput}
                  name={"description"}
                  placeholder={"description"}
                  value={formik.values.description}
                />
                {formik.touched.description && formik.errors.description && (
                  <div style={{ color: "red" }}>
                    {formik.errors.description}
                  </div>
                )}
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <input
                  onChange={handleFormInput}
                  name={"image"}
                  placeholder={"image url"}
                  value={formik.values.image}
                />
                {formik.touched.image && formik.errors.image && (
                  <div style={{ color: "red" }}>{formik.errors.image}</div>
                )}
              </FormControl>
              {createsProductisLoading || editProductIsLoading ? (
                <Spinner />
              ) : (
                <Button type={"submit"}>submit product</Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
